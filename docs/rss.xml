<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>MeltIce's Notebook</title><link>http://note.mtice.top</link><description>MeltIce 的赛博笔记本</description><copyright>MeltIce's Notebook</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://q.qlogo.cn/headimg_dl?dst_uin=3480656548&amp;spec=640&amp;img_type=jpg</url><title>avatar</title><link>http://note.mtice.top</link></image><lastBuildDate>Fri, 25 Apr 2025 16:01:17 +0000</lastBuildDate><managingEditor>MeltIce's Notebook</managingEditor><ttl>60</ttl><webMaster>MeltIce's Notebook</webMaster><item><title>C++的程序挂起</title><link>http://note.mtice.top/post/14.html</link><description>在Python中，我们可以使用`time.sleep()`来让程序挂起一段时间，在C++中，我们也可以让程序挂起

## 方法一: 使用`&lt;thread&gt;`的`sleep_for()` (C++11以上)

### 1. 引入`&lt;thread&gt;`和`&lt;chrono&gt;`头文件
```cpp
#include &lt;thread&gt;
#include &lt;chrono&gt;
```

### 2. 程序的挂起方法
```cpp
// 单位为秒
std::this_thread::sleep_for(std::chrono::seconds(秒数));
// 单位为毫秒
std::this_thread::sleep_for(std::chrono::milliseconds(毫秒数);
// 单位为微秒
std::this_thread::sleep_for(std::chrono::microseconds(微秒数);
```
如果嫌麻烦可以封装为一个函数:
```cpp
void sleep(double time)
{
    std::this_thread::sleep_for(std::chrono::milliseconds(static_cast&lt;long long&gt; (time * 1000)));
}
```

## 方法二: 使用系统提供的头文件库
&gt; [!NOTE]
&gt; 这种方法不推荐使用，有以下缺点:
&gt; - **平台依赖**：代码无法跨平台。</description><guid isPermaLink="true">http://note.mtice.top/post/14.html</guid><pubDate>Fri, 25 Apr 2025 09:50:40 +0000</pubDate></item><item><title>"\n"与std::endl的区别</title><link>http://note.mtice.top/post/13.html</link><description>在C++中，`'\n'`和`std::endl`都用于在输出中插入换行符，但它们在底层行为和适用场景上有显著区别。</description><guid isPermaLink="true">http://note.mtice.top/post/13.html</guid><pubDate>Fri, 25 Apr 2025 09:22:27 +0000</pubDate></item><item><title>CSS自定义字体</title><link>http://note.mtice.top/post/12.html</link><description>在 CSS 中使用自定义字体可以通过 `@font-face` 规则实现，允许你加载并使用非系统默认的字体。</description><guid isPermaLink="true">http://note.mtice.top/post/12.html</guid><pubDate>Sat, 19 Apr 2025 06:09:39 +0000</pubDate></item><item><title>网页添加必应搜索框</title><link>http://note.mtice.top/post/11.html</link><description>### HTML部分
```html
&lt;form onsubmit='return search()' style='white-space: nowrap;'&gt;
    &lt;input type='text' autocomplete='off' id='search_input' placeholder='必应搜索...'&gt;
    &lt;button onclick='return search()'&gt;搜索&lt;/button&gt;
&lt;/form&gt;
```
其中，`style='white-space: nowrap;'`使按钮不换行，与输入框保持在同一行上。</description><guid isPermaLink="true">http://note.mtice.top/post/11.html</guid><pubDate>Sat, 19 Apr 2025 05:57:03 +0000</pubDate></item><item><title>Python的format()格式控制</title><link>http://note.mtice.top/post/10.html</link><description>`format()`方法中模版字符串的槽中除了包括参数序号，还可以包括格式控制信息，此时，槽的内部样式如下：
```python
{&lt;参数序号&gt;:&lt;格式控制标记&gt;}
```
其中，格式控制标记用来控制参数显示时的格式。</description><guid isPermaLink="true">http://note.mtice.top/post/10.html</guid><pubDate>Sat, 19 Apr 2025 05:28:39 +0000</pubDate></item><item><title>Python实现单行动态刷新</title><link>http://note.mtice.top/post/9.html</link><description>在`print()`函数中更换参数`end`的默认值为`''`，即每次使用`print()`函数输出时不换行。</description><guid isPermaLink="true">http://note.mtice.top/post/9.html</guid><pubDate>Sat, 19 Apr 2025 04:39:09 +0000</pubDate></item><item><title>C语言的随机数的生成</title><link>http://note.mtice.top/post/8.html</link><description>## rand 随机数发生器
- 头文件: `stdlib.h`
- 功能: 生成一个随机数

### rand 函数声明
```c
int rand (void);
```
rand函数无需传入参数，返回值是 0-RAND_MAX(32767) 之间的一个数。</description><guid isPermaLink="true">http://note.mtice.top/post/8.html</guid><pubDate>Sat, 12 Apr 2025 03:38:13 +0000</pubDate></item><item><title>在QQ 8.9.71以上版本中保存表情包</title><link>http://note.mtice.top/post/6.html</link><description>众所周知，腾讯在QQ8.9.71 中取消了保存表情包图片的功能。</description><guid isPermaLink="true">http://note.mtice.top/post/6.html</guid><pubDate>Mon, 03 Feb 2025 12:46:25 +0000</pubDate></item><item><title>Python检测系统</title><link>http://note.mtice.top/post/5.html</link><description>### 方法一：利用 `os.name` 检测&#13;
`os.name` 用于返回系统类型&#13;
首先需要引入 `os` 模块&#13;
```python&#13;
import os&#13;
```&#13;
接着使用 `os.name` 便可获取系统类型&#13;
例如在Windows下运行以下代码会输出'nt'&#13;
```python&#13;
import os&#13;
print(os.name)&#13;
```&#13;
以下是不同系统所对应的系统类型&#13;
| 系统名称          | 系统类型 |&#13;
|-------------------|----------|&#13;
| Windows           | nt       |&#13;
| Linux等类UNIX系统 | posix    |&#13;
| Java虚拟机        | java  |&#13;
&#13;
### 方法二：利用 `sys.platform` 检测&#13;
`sys.platform` 用于返回系统标识符&#13;
首先需要引入 `sys` 模块&#13;
```python&#13;
import sys&#13;
```&#13;
接着使用 `sys.platform` 便可获取系统标识符&#13;
例如在Windows下运行以下代码会输出'win32'&#13;
```python&#13;
import sys&#13;
print(sys.platform)&#13;
```&#13;
以下是不同系统所对应的系统标识符&#13;
| 系统名称       | 系统标识符 |&#13;
|----------------|------------|&#13;
| Windows        | win32      |&#13;
| Linux          | linux      |&#13;
| Windows/Cygwin | cygwin     |&#13;
| macOS          | darwin     |&#13;
&#13;
&lt;!-- ##{'script':'&lt;script src='https://blog.meekdai.com/Gmeek/plugins/articletoc.js'&gt;&lt;/script&gt;'}## --&gt;。</description><guid isPermaLink="true">http://note.mtice.top/post/5.html</guid><pubDate>Sun, 24 Nov 2024 07:16:02 +0000</pubDate></item><item><title>仿键盘输入动画效果</title><link>http://note.mtice.top/post/4.html</link><description>### 代码&#13;
```python&#13;
import time&#13;
&#13;
def printa(text):&#13;
    for i in text:&#13;
        print(i, end='', flush=True)&#13;
        time.sleep(0.05)&#13;
```&#13;
&#13;
### 使用方法&#13;
```python&#13;
printa(你想显示的内容)&#13;
```&#13;
示例: &#13;
```python&#13;
printa('Hello, World!')&#13;
```&#13;
&#13;
&lt;!-- ##{'script':'&lt;script src='https://blog.meekdai.com/Gmeek/plugins/articletoc.js'&gt;&lt;/script&gt;'}## --&gt;&#13;
。</description><guid isPermaLink="true">http://note.mtice.top/post/4.html</guid><pubDate>Sun, 03 Nov 2024 09:30:03 +0000</pubDate></item><item><title>Rust删除输入后的换行符</title><link>http://note.mtice.top/post/3.html</link><description>## 问题
在 `io::stdin()` 中，会将用户的输入自动添加上换行符，就像这样:
```Rust
use std::io;
fn main() {
    println!('输入一个数字');
    let mut num = String::new();
    io::stdin()
        .read_line(&amp;mut num)
        .expect('???');
    println!('你输入了 {} 数字', num);
}
```
输出结果为: 
```Bash
root@localhost:~# ./test
输入一个数字
10
你输入了 10
 数字
root@localhost:~#
```

## 解决方法
可以先用一个变量存储输入的内容，再用另一个变量使用 `trim()` 来去除末尾换行符，例如:
```Rust
use std::io;
fn main() {
    println!('输入一个数字');
    let mut num1 = String::new();
    io::stdin()
        .read_line(&amp;mut num1)
        .expect('???');
    let num = num1.trim();
    println!('你输入了 {} 数字', num);
}
```
输出结果为:
```Bash
root@localhost:~# ./test
输入一个数字
10
你输入了 10 数字
root@localhost:~#
```

&lt;!-- ##{'script':'&lt;script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'&gt;&lt;/script&gt;'}## --&gt;。</description><guid isPermaLink="true">http://note.mtice.top/post/3.html</guid><pubDate>Sun, 27 Oct 2024 01:45:30 +0000</pubDate></item><item><title>解决C++输入时无法接收空格</title><link>http://note.mtice.top/post/2.html</link><description>## 问题
1. 使用 `std::cin` 获取输入的时候，如果输入内容有空格，则 `std::cin` 只会获取空格前面的内容
2. 未输入内容时按回车键不会进入下面的程序，而是会换行
## 解决方法
可以使用 string 头文件里的 `std::getline` 函数来替代 `std::cin`
首先需要引入 string 头文件：
```cpp
#include &lt;string&gt;
```
使用方法：
```cpp
std::getline(std::cin, 变量名);
```
&gt; [!NOTE]
&gt; `std::getline` 仅支持string类型变量，因此想要获取输入到int类型变量可以这么做
&gt; ```cpp
&gt; std::string test1;  // 声明一个名为test1的字符串型变量
&gt; int test;  // 声明一个名为test的整形变量
&gt; std::getline(std::cin, test1);
&gt; test = std::stoi(test1);  // 将变量test1转为整形并存储于变量test中
&gt; ```

示例：
```cpp
std::string input;  // 声明一个名为input的字符串型变量
std::getline(std::cin, input);
```
&lt;!-- ##{'script':'&lt;script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'&gt;&lt;/script&gt;'}## --&gt;。</description><guid isPermaLink="true">http://note.mtice.top/post/2.html</guid><pubDate>Sat, 19 Oct 2024 08:06:04 +0000</pubDate></item><item><title>C++生成范围内随机整数</title><link>http://note.mtice.top/post/1.html</link><description>##  1. `&lt;random&gt;`库方法 (C++11以上)
C++11新增了`&lt;random&gt;`库，用于生成更高质量的随机数

### 使用方法：

#### 1. 包含头文件 random
```cpp
#include &lt;random&gt;
```
#### 2. 创建一个随机数生成器对象


```cpp
std::random_device genr;  // 使用设备信息生成随机数种子，质量更高
std::mt19937 gen(genr());  // 创建一个基于梅森螺旋算法的随机数生成器，使用设备信息种子
```
#### 3. 创建一个均匀分布的随机数生成器
```cpp
// 用于生成整数
std::uniform_int_distribution&lt;int&gt; dist(整数范围); 
// 用于生成整数
std::uniform_real_distribution&lt;float&gt; dist(整数范围);
```
例如：
```cpp
// 这段代码会让生成器生成1到10之内的随机整数
std::uniform_int_distribution&lt;int&gt; dist(1, 10);
// 这段代码会让生成器生成0.5到2.5之内的随机浮点数
std::uniform_real_distribution&lt;float&gt; dist(0.5, 2.5);
```

#### 4. 生成随机数
使用 `dist(gen)` 生成随机数
打印出生成的随机数：
```cpp
std::cout &lt;&lt; '随机数: ' &lt;&lt; dist(gen) &lt;&lt; std::endl;
```

## 2. 使用C风格`rand()`函数
&gt; [!NOTE]
&gt; 使用这种方式生成的随机数质量较低，且会有分布不均匀，线程不安全等问题，所以建议不要再使用这个方法

具体方法见 [C语言的随机数生成](https://note.mtice.top/post/8.html)
&lt;!-- ##{'script':'&lt;script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'&gt;&lt;/script&gt;'}## --&gt;。</description><guid isPermaLink="true">http://note.mtice.top/post/1.html</guid><pubDate>Fri, 18 Oct 2024 10:58:36 +0000</pubDate></item></channel></rss>